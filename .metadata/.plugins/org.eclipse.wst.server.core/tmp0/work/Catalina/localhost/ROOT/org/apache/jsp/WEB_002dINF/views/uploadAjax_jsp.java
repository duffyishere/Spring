/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.43
 * Generated at: 2021-05-07 14:12:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class uploadAjax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/Users/zzun_ho9/Programing/Spring/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ex05/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1609769295640L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\t\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Upload Ajax</title>\n");
      out.write("<link href=\"/resources/css/style.css\" rel=\"stylesheet\">\n");
      out.write("</head>\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("\t<h1>Upload with Ajax</h1>\n");
      out.write("\n");
      out.write("\t<div class=\"uploadDiv\">\n");
      out.write("\t\t<input type=\"file\" name='uploadFiles' multiple></p>\n");
      out.write("        <button id=\"uploadBtn\">Upload</button>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("    <div class=\"uploadResult\">\n");
      out.write("        <ul class=\"uploadResultUL\">\n");
      out.write("        </ul>\n");
      out.write("    </div>\n");
      out.write("\n");
      out.write("\t<div class=\"bigPictureWrapper\">\n");
      out.write("\t\t<div class=\"bigPicture\">\n");
      out.write("\t\t</div>\n");
      out.write("\t</div>\n");
      out.write("\n");
      out.write("\t<script src=\"https://code.jquery.com/jquery-3.6.0.js\"\n");
      out.write("\t\tintegrity=\"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\"\n");
      out.write("\t\tcrossorigin=\"anonymous\"></script>\n");
      out.write("\n");
      out.write("\t<script type=\"text/javascript\">\n");
      out.write("\n");
      out.write("        let uploadResult = $(\".uploadResult ul\");\n");
      out.write("\n");
      out.write("        function showUploadedFiles(uploadResultArr){\n");
      out.write("            let str = \"\";\n");
      out.write("\n");
      out.write("            $(uploadResultArr).each(function (i, obj){\n");
      out.write("               if(!obj.image){\n");
      out.write("\t\t\t\t    let fileCallPath = encodeURIComponent(obj.uploadPath+\"/\"+obj.uuid+\"_\"+obj.fileName);\n");
      out.write("\t\t\t\t    console.log(fileCallPath);\n");
      out.write("\n");
      out.write("               \t\tstr += \"<li><a href='/download?fileName=\"+fileCallPath+\"'><img src='/resources/img/attach.png'/></a>\"+obj.fileName+\n");
      out.write("\t\t\t\t\t\t\t\"<span data-file=\\'\"+fileCallPath+\"\\' data-type='file'>x</span></li>\";\n");
      out.write("\t\t\t   }\n");
      out.write("               else {\n");
      out.write("\t\t\t\t   let fileCallPath = encodeURIComponent(obj.uploadPath+\"/s_\"+obj.uuid+\"_\"+obj.fileName);\n");
      out.write("\t\t\t\t   console.log(obj.uploadPath+\"/s_\"+obj.uuid+\"_\"+obj.fileName);\n");
      out.write("\n");
      out.write("\t\t\t\t   let originalPath = obj.uploadPath+\"/\"+obj.uuid+\"_\"+obj.fileName\n");
      out.write("\n");
      out.write("\t\t\t\t   originalPath = originalPath.replace(new RegExp(/\\\\/g),\"/\");\n");
      out.write("\n");
      out.write("\t\t\t\t   str += \"<li><a href=javascript:showImage(\\'\"+originalPath+\"\\')><img src='/display?fileName=\"+fileCallPath+\"'></a>\"+\n");
      out.write("               \t\t\t\t\"<span data-file=\\'\"+fileCallPath+\"\\' data-type='image'>x</span></li></li>\";\n");
      out.write("\t\t\t\t   // str += \"<li><img src='/display?fileName=\"+fileCallPath+\"'/></li>\";\n");
      out.write("\t\t\t   }\n");
      out.write("            });\n");
      out.write("\t\t\tuploadResult.append(str);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function removeFile(){\n");
      out.write("        \tlet ul = $(\".uploadResultUL\");\n");
      out.write("\t\t\tlet li = ul[0].getElementsByTagName('li');\n");
      out.write("\n");
      out.write("\t\t\tconsole.log(li);\n");
      out.write("\n");
      out.write("\t\t\tif(li.length > 0)  {\n");
      out.write("\t\t\t\tli[0].remove();\n");
      out.write("\t\t\t}\n");
      out.write("\t\t}\n");
      out.write("\n");
      out.write("\t\t$(\".uploadResult\").on(\"click\", \"span\", function (e){\n");
      out.write("\t\t\tlet targetFile = $(this).data(\"file\");\n");
      out.write("\t\t\tlet targetType = $(this).data(\"type\");\n");
      out.write("\n");
      out.write("\t\t\tconsole.log(targetFile);\n");
      out.write("\n");
      out.write("\t\t\t$.ajax({\n");
      out.write("\t\t\t\turl: '/deleteFile',\n");
      out.write("\t\t\t\tdata: {'fileName': targetFile, 'fileType': targetType},\n");
      out.write("\t\t\t\tdataType: 'text',\n");
      out.write("\t\t\t\ttype: 'POST',\n");
      out.write("\t\t\t\tsuccess: function (result){\n");
      out.write("\t\t\t\t\talert(result);\n");
      out.write("\t\t\t\t\tremoveFile();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t})\n");
      out.write("\n");
      out.write("\t\t$(document).ready(function() {\n");
      out.write("\t\t\tlet regex = new RegExp(\"(.*?)\\.(png|gif|jpg|JPG|jpeg|pdf|hwp)$\");\n");
      out.write("\t\t\tlet maxSize = 5242880; //5MB\n");
      out.write("\n");
      out.write("\t\t\tfunction checkExtension(fileName, fileSize) {\n");
      out.write("\n");
      out.write("\t\t\t\tconsole.log(\"fileName: \"+fileName);\n");
      out.write("\n");
      out.write("\t\t\t\tif (fileSize >= maxSize) {\n");
      out.write("\t\t\t\t\talert(\"파일 사이즈 초과\")\n");
      out.write("\t\t\t\t\treturn false;\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\tif (!regex.test(fileName)) {\n");
      out.write("\t\t\t\t\talert(\"해당 종류의 파일은 업로드할 수 없습니다.\");\n");
      out.write("\t\t\t\t\treturn false\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\treturn true;\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\tlet cloneObj = $(\".uploadDiv\").clone();\n");
      out.write("\n");
      out.write("\t\t\tfunction uploadFile(){\n");
      out.write("\t\t\t\tlet formData = new FormData();\n");
      out.write("\t\t\t\tlet inputFile = $(\"input[name='uploadFiles']\");\n");
      out.write("\t\t\t\tlet files = inputFile[0].files;\n");
      out.write("\n");
      out.write("\t\t\t\tconsole.log(\"files size: \"+files.length);\n");
      out.write("\t\t\t\tif(files.length <= 0){\n");
      out.write("\t\t\t\t\talert(\"업로드 하실 파일을 선택헤주세요.\")\n");
      out.write("\t\t\t\t\treturn false;\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\n");
      out.write("\t\t\t\tfor (let i = 0; i < files.length; i++) {\n");
      out.write("\t\t\t\t\tconsole.log(\"file size: \"+files[i].size);\n");
      out.write("\t\t\t\t\tif (!checkExtension(files[i].name, files[i].size)) {\n");
      out.write("\t\t\t\t\t\treturn false;\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t\tformData.append(\"uploadFiles\", files[i]);\n");
      out.write("\t\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t\t// $.ajax({\n");
      out.write("\t\t\t\t// \turl : '/uploadAjaxAction',\n");
      out.write("\t\t\t\t// \tprocessData : false,\n");
      out.write("\t\t\t\t// \tcontentType : false,\n");
      out.write("\t\t\t\t// \tdata : formData,\n");
      out.write("\t\t\t\t// \tmethod : 'POST',\n");
      out.write("\t\t\t\t// \tsuccess : function(result) {\n");
      out.write("\t\t\t\t// \t\talert(\"Uploaded\");\n");
      out.write("\t\t\t\t// \t}\n");
      out.write("\t\t\t\t//\n");
      out.write("\t\t\t\t// });\n");
      out.write("\n");
      out.write("\t\t\t\t$.ajax({\n");
      out.write("\t\t\t\t\turl : '/uploadAjaxAction',\n");
      out.write("\t\t\t\t\tprocessData : false,\n");
      out.write("\t\t\t\t\tcontentType : false,\n");
      out.write("\t\t\t\t\tdata : formData,\n");
      out.write("\t\t\t\t\ttype: 'POST',\n");
      out.write("\t\t\t\t\tdataType: 'json',\n");
      out.write("\t\t\t\t\tsuccess : function(result) {\n");
      out.write("\t\t\t\t\t\talert(\"Uploaded\")\n");
      out.write("\t\t\t\t\t\tconsole.log(result);\n");
      out.write("\t\t\t\t\t\tshowUploadedFiles(result);\n");
      out.write("\n");
      out.write("\t\t\t\t\t\t$(\".uploadDiv\").html(cloneObj.html());\n");
      out.write("\t\t\t\t\t\t$(\".uploadDiv button\").on(\"click\", uploadFile);\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t}\n");
      out.write("\n");
      out.write("\t\t\t$(\"#uploadBtn\").on(\"click\", function(e) {\n");
      out.write("\t\t\t\tuploadFile();\n");
      out.write("\t\t\t});\n");
      out.write("\n");
      out.write("\t\t\t$(\".bigPictureWrapper\").on(\"click\", function (e){\n");
      out.write("\t\t\t\t$(\".bigPicture\").animate({width: '0%', height: '0%'}, 800);\n");
      out.write("\t\t\t\tsetTimeout(function (){\n");
      out.write("\t\t\t\t\t$(\".bigPictureWrapper\").hide();\n");
      out.write("\t\t\t\t}, 1000);\n");
      out.write("\t\t\t})\n");
      out.write("\t\t});\n");
      out.write("\n");
      out.write("\n");
      out.write("        function showImage(fileCallPath){\n");
      out.write("        \t// alert(fileCallPath);\n");
      out.write("\n");
      out.write("\t\t\t$(\".bigPictureWrapper\").css(\"display\", \"flex\").show();\n");
      out.write("\t\t\t$(\".bigPicture\").html(\"<img src='/display?fileName=\"+encodeURI(fileCallPath)+\"'/>\")\n");
      out.write("\t\t\t.animate({width:'100%', height:'100%'}, 800);\n");
      out.write("\t\t}\n");
      out.write("\t</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
